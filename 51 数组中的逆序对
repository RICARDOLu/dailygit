1. 双重循环 o(n2) 超出时间限制
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int res=0;
        vector<int> sort_checked;
        for(int i = 0;i<nums.size();i++){
            vector<int>::iterator pos;
            for(pos = sort_checked.begin();pos!=sort_checked.end();pos++){
                if(nums[i]>=*pos)break;
            }
            res+= pos-sort_checked.begin();
            sort_checked.insert(pos,nums[i]);
        }
        return res;
    }
};
2.归并
class Solution {
public:
    int merge(vector<int>& nums,int left,int right){
        vector<int> tmp;
        if(left==right) return 0;
        int mid = (left+right)/2;
        int i=left,res = 0,ptrl=0,ptrr=0;
        res += merge(nums,left,mid)+merge(nums,mid+1,right);
        tmp.assign(nums.begin()+left,nums.begin()+right+1);
        while(ptrl!=mid-left+1&&ptrr!=right-mid){
            if(tmp[ptrl]<=tmp[mid+1-left+ptrr]){
                nums[i] = tmp[ptrl];
                i++,ptrl++;
                res+=ptrr;
            }else{
                nums[i] = tmp[ptrr+mid+1-left];
                i++,ptrr++;
            }
        }
        while(ptrl!=mid-left+1){
            nums[i] = tmp[ptrl];
            i++,ptrl++;
            res+=ptrr;
        }
        while(ptrr!=right-mid){
            nums[i] = tmp[ptrr+mid+1-left];
            i++,ptrr++;
        }
        return res;
    }
    int reversePairs(vector<int>& nums) {
        if(nums.size()==0)return 0;
        return merge(nums,0,nums.size()-1);
    }
};
3.树状数组
class BIT{
private:
    vector<int> tree;
    int n;
public:
    BIT(int _n):n(_n),tree(n+1){}
    int lowbit(int x){
        return x&(-x);
    }
    int query(int x){
        int ret=0;
        while(x){
            ret+=tree[x];
            x-=lowbit(x);
        }
        return ret;
    }
    void update(int x){
        while(x<=n){
            tree[x]++;
            x+=lowbit(x);
        }
        return;
    }
};

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        vector<int> tmp = nums;
        BIT bittree(nums.size());
        int res=0;
        sort(tmp.begin(),tmp.end());
        for(int &num:nums){
            num = lower_bound(tmp.begin(),tmp.end(),num)-tmp.begin()+1;
        }
        // cout<<"test"<<endl;
        for(int i = nums.size()-1;i>=0;i--){
            // cout<<"test1"<<endl;
            res+=bittree.query(nums[i]-1);
            bittree.update(nums[i]);
        }
        return res;
    }
};
