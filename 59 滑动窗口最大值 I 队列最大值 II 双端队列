1.双端队列 使min()时间复杂度o(1) 总体复杂度o(n)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> que;
        for(int i=0;i<nums.size();i++){
            int tmp;
            if(i>=k&&que.front()==nums[i-k])que.pop_front();
            while(!que.empty()&&(que.front()<nums[i]))que.pop_front();
            while(!que.empty()&&(que.back()<nums[i]))que.pop_back();
            que.push_back(nums[i]);
            if(i>=k-1)res.push_back(que.front());
        }
        return res;
    }
};
2.class MaxQueue {
public:
    deque<int> que,maxque;
    MaxQueue() {
    }
    
    int max_value() {
        if(maxque.empty())return -1;
        return maxque.front();
    }
    
    void push_back(int value) {
        que.push_back(value);
        while(!maxque.empty()&&maxque.back()<value)maxque.pop_back();
        maxque.push_back(value);
    }
    
    int pop_front() {
        if(que.empty())return -1;
        int tmp = que.front();
        if(que.front()==maxque.front())maxque.pop_front();
        que.pop_front();
        return tmp;
    }
};
