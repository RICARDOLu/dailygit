1.双栈实现
class Solution {
public:
    stack<TreeNode*> s1,s2;
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root)return res;
        s1.push(root);
        while(!s1.empty()||!s2.empty()){
            res.push_back(vector<int>(0));
            if(!s1.empty()){
                while(!s1.empty()){
                    root = s1.top();
                    s1.pop();
                    res[res.size()-1].push_back(root->val);
                    if(root->left)s2.push(root->left);
                    if(root->right)s2.push(root->right);
                }
            }
            else{
                while(!s2.empty()){
                    root = s2.top();
                    s2.pop();
                    res[res.size()-1].push_back(root->val);
                    if(root->right)s1.push(root->right);
                    if(root->left)s1.push(root->left);
                }
            }
        }
        return res;
    }
};
2.层缓存法(每一层结果缓存到数组,将数组反转)
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        queue<TreeNode*> q;
        q.push(root);
        int layer=0;
        while(!q.empty()){
            int size=q.size();
            vector<int> list;
            while(size--){
                auto node=q.front();
                q.pop();
                list.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            if(layer%2==1) reverse(list.begin(),list.end());
            layer++;
            res.push_back(list);
        }
        return res;
    }
};
