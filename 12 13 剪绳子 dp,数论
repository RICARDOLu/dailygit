1.动态规划
class Solution {
public:
    unordered_map<int,int> max_map; 
    Solution(){
        max_map[1]=0;
    }
    int cuttingRope(int n) {
        int max=0;
        if(max_map[n])return max_map[n];
        for(int i=1;i<=n/2;i++){
            int res = (cuttingRope(i)>i?cuttingRope(i):i)*(cuttingRope(n-i)>n-i?cuttingRope(n-i):n-i);
            if(max<res)max = res;
        }
        max_map[n]=max;
        return max;
    }
};
2.数论
任何大于1的数都可由2和3相加组成（根据奇偶证明）
因为2*2=1*4，2*3>1*5, 所以将数字拆成2和3，能得到的积最大
因为2*2*2<3*3, 所以3越多积越大 时间复杂度O(n/3)，用幂函数可以达到O(log(n/3))
 ***一个数大等于4,则(x-2)*2>=x,一个数大于等于5,(x-3)*3>x.
class Solution {
public:
    int cuttingRope(int n) { 
        if(n==2||n==3)return n-1;
        long res=1;
        while(n>4){
            res = (3*res)%1000000007;
            n-=3;
        }
        res = (n*res)%1000000007;
        return res;
    }
};
