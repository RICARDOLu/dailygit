1.头插法
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* last=head,tmp;
        if(last==NULL)return NULL;
        if(last->next==NULL)return last;
        while(last->next){
            last=last->next;
        }
        while(head->next&&head->next!=last){
            ListNode* tmp = last->next;
            last->next=head,head=head->next,last->next->next=tmp;
        }
        head->next=last->next,last->next=head;
        return last;
    }
};
2.双指针
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode *pre=NULL,*cur=head,*tmp;
        while(cur){
            tmp = cur->next,cur->next=pre,pre=cur,cur=tmp;
        }
        return pre;
    }
};
3.递归
class Solution {
public:
    ListNode* dp(ListNode* head) {
        if(head==NULL)return NULL;
        if(head->next==NULL)return head;
        ListNode* next = dp(head->next);
        head->next = NULL;
        next->next = head;
        return head;
    }
    ListNode* reverseList(ListNode* head) {
        ListNode* last = head;
        while(last&&last->next)last=last->next;
        dp(head);
        return last;
    }
};
