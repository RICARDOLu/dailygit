1.整体建堆
class Solution {
public:
    struct mincompare{
        bool operator() (const int x,const int y ){
            return x>y;
        }
    };
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        make_heap(arr.begin(),arr.end(),mincompare());
        vector<int> res;
        while(k--){
            pop_heap(arr.begin(),arr.end(),mincompare());
            res.push_back(arr.back());
            arr.pop_back();
        }
        return res;
    }
};
2.建k大小的堆
3.桶排序
class Solution {
public:
    int getmin(int bucketindex,vector<int> &arr,int k){
        int min=INT_MAX,index;
        for(int i=bucketindex;i<arr.size();i+=k){
            if(arr[i]<=min)min=arr[i],index=i;
        }
        arr[index]=INT_MAX;
        return min;
    }
    pair<int,int> getmin(vector<pair<int,int>> &arr){
        int min=INT_MAX,index;
        for(int i=0;i<arr.size();i++){
            if(arr[i].second<=min)min=arr[i].second,index=arr[i].first;
        }
        return pair<int,int>(index,min);
    }
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        vector<pair<int,int>> kmin(k);
        vector<int> res;
        for(int i=0;i<k;i++)kmin[i].first=i,kmin[i].second=getmin(i,arr,k);
        for (int i=0;i<k;i++){
            pair<int,int> chosen = getmin(kmin);
            res.push_back(chosen.second);
            kmin[chosen.first] = pair<int,int>(chosen.first,getmin(chosen.first,arr,k));
        }
        return res;
    }
};
4.快排
class Solution {
public:
    void quicksort(vector<int>& arr, int l,int r,int k){
        if(l==r)return;
        int i=l,j=r;
        while(i<j){
            if(arr[i]<=arr[r])i++;
            else{
                j--;
                swap(arr[i],arr[j]);
            }
        }
        swap(arr[j],arr[r]);
        if(k==j)return;
        else if(k<j)quicksort(arr,l,j-1,k);
        else quicksort(arr,j+1,r,k);
        return;
    }
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        quicksort(arr,0,arr.size()-1,k-1);
        vector<int> res;
        res.assign(arr.begin(),arr.begin()+k);
        return res;
    }
};
